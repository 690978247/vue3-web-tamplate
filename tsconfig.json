/* 
  extends: 从另一个配置文件里继承配置
  files: 指定一个包含相对或绝对文件路径的列表
  include: 通过匹配需要转换的文件
  exclude: 忽略include和files中需要转换的文件
  compilerOptions: 一个复杂的配置，详见文档https://www.tslang.cn/docs/handbook/compiler-options.html
*/
{
  // "extends": "@vue/tsconfig/tsconfig.web.json",
  "include": ["src/**/*", "src/**/*.vue", "src/utils/*.ts", "types/*.d.ts"],
  "compilerOptions": {
    "target": "esnext", //用于指定 TS 最后编译出来的 ES 版本
    "module": "esnext", // 设置编译后代码使用的模块化系统：commonjs | UMD | AMD | ES2020 | ESNext | System
    "moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "skipLibCheck": true, // 忽略所有的声明文件（ *.d.ts）的类型检查
    "strict": true, //开启所有的严格检查
    "esModuleInterop": true, //支持导入 CommonJs 模块
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。默认值：module === "system" 或设置了 --esModuleInterop 且 module 不为 es2015 / esnext
    "forceConsistentCasingInFileNames": true, // 禁止对同一个文件的不一致的引用
    "jsx": "preserve", //在 `.tsx`文件里支持JSX： `"React"`或 `"Preserve"`
    "importHelpers": true, // 从 tslib 导入辅助工具函数（比如 __extends， __rest等）
    "baseUrl": "./", //// 解析非相对模块的基地址，默认是当前目录
    "noImplicitAny": true, // 不允许使用any
    "resolveJsonModule": true, //允许导入扩展名为“.json”的模块
    "isolatedModules": true, //确保每个文件都可以在不依赖其他导入的情况下安全地进行传输
    "sourceMap": true, // 生成目标文件的sourceMap文件
    "allowJs": true, // 允许编译器编译JS，JSX文件
    "noEmit": true, // 不输出文件,即编译后不会生成任何js文件
    "lib": ["dom", "esnext"], // 编译过程中需要引入的库文件的列表
    // "ignoreDeprecations": "5.0",
    // "verbatimModuleSyntax": false,
    "paths": {
      "@/*": ["src/*"] //解决引入报错  找不到模块“@/xxxx” 或其相应的类型声明
    },
    "types": [
      //要包含的类型声明文件名列表
      /* "unplugin-vue-define-options/macros-global" */
      "node",
      "vite/client",
      "element-plus/global"
    ],
    "typeRoots": ["node_modules/@types/", "types", "node_modules"]
  }
}
